name: Release

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:
  build-go-binary:
    name: Build Go Binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Build binary
        run: |
          go build -v -o myapp .
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp-binary
          path: myapp
      - name: Set version output
        id: set_version
        run: |
          # Strip "refs/tags/v" from the tag reference
          version=$(echo "${GITHUB_REF}" | sed 's/^refs\/tags\/v//')
          echo "version=${version}" >> $GITHUB_OUTPUT

  create-deb-package:
    name: Create Debian Package
    needs: build-go-binary
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.build-go-binary.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp-binary
          path: ./bin
      - name: Make binary executable
        run: chmod +x ./bin/myapp
      - name: Create Debian package structure
        run: |
          mkdir -p debian-pkg/DEBIAN
          mkdir -p debian-pkg/usr/local/bin
          cp bin/myapp debian-pkg/usr/local/bin/
          cat > debian-pkg/DEBIAN/control <<EOF
Package: myapp
Version: ${VERSION}
Architecture: amd64
Maintainer: Your Name <your.email@example.com>
Description: Your application description
 A longer description that can span multiple lines.
EOF
      - name: Build Debian package
        run: dpkg-deb --build debian-pkg
      - name: Rename Debian package
        run: mv debian-pkg.deb myapp_${VERSION}_amd64.deb
      - name: Upload Debian package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./myapp_${VERSION}_amd64.deb
          asset_name: myapp_${VERSION}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

  create-rpm-package:
    name: Create RPM Package
    needs: build-go-binary
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.build-go-binary.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp-binary
          path: ./bin
      - name: Make binary executable
        run: chmod +x ./bin/myapp
      - name: Install RPM tools
        run: sudo apt-get update && sudo apt-get install -y rpm
      - name: Create RPM spec file
        run: |
          cat > myapp.spec <<EOF
Name:           myapp
Version:        ${VERSION}
Release:        1%{?dist}
Summary:        Your application description

License:        Your License

%description
A longer description that can span multiple lines.

%install
mkdir -p %{buildroot}/usr/local/bin
install -m 755 bin/myapp %{buildroot}/usr/local/bin/myapp

%files
/usr/local/bin/myapp

%changelog
* $(date +"%a %b %d %Y") Your Name <your.email@example.com> - ${VERSION}-1
- Initial RPM release
EOF
      - name: Build RPM package
        run: |
          mkdir -p ~/rpmbuild/{RPMS,SRPMS,BUILD,SOURCES,SPECS,tmp}
          cp myapp.spec ~/rpmbuild/SPECS/
          cd ~/rpmbuild
          rpmbuild -bb SPECS/myapp.spec --define "_topdir $(pwd)" --define "_binary_filedigest none" --buildroot=$(pwd)/BUILDROOT
          find RPMS -name "*.rpm" -exec cp {} $GITHUB_WORKSPACE/ \;
      - name: Upload RPM package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./myapp-${VERSION}-1.x86_64.rpm
          asset_name: myapp-${VERSION}-1.x86_64.rpm
          asset_content_type: application/x-rpm
